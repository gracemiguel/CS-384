//CS 385 2/24/21

Selection sort 

sum of the first n-1 numbers: n(n-1)/2
selection sort always makes exactly n(n-1)/2 comparisons
Run time: Theta(n^2)

selction sort makes at most n-1 swaps

Write down a recurrence relation for selection sort

T(n) = a*T(n-c) + f(n)
a = how many recursive calls are amde in a single execution of the function
c = is that constant by which the input size is decreased
f(n) = how much work outside the recursive the function does
ii.e. how many times the principal occurs

x(n)=x(n-1) + n-1, x(0)=0 <- initial condition, number of comparisons of the base case

Backwards Substitution

1. Substitution 1: replace n with n-1
x(n-1) = x(n-2) + n-2
x(n)= x(n-2) + n-2 + n-1

2. Substitution 2: replace n with n-2 in the original recurrence relation
x(n-2) = x(n-3) + n-3
x(n) = x(n-3) + n-3 + n-2 + n-1

3. Write the general form of the recurrence
x(n) = x(n-i)+ n-i + n-i+1 + n-i+3 + ... n-1

4. Make use of the initial condition to remove the recursion from the general form

x(n-i) = 0
Set the parenthesized input to the parenthesizd input of the initial condition
n-i=0
i=n

5. Put it all together and produce a closed-form expression for the run-time or
the number of times the principal operation is executed.

x(n) = x(n-n) + n-n + n-n+1 +n-n+2 + ... +n-1
= 0 + 0 + 1+ 2+ .. + n-1
=n(n-1)/2

Binary search(this is divide and conquer)
x(n) is the running time

x(n) = x(n/2) + 1, x(1)=1

Step 1: Replace n with n/2
x(n/2) = x(n/4)+1
x(n) = x(n/4) + 1 +1
= x(n/4)+2

Step 2 Replace n with n/4
x(n/4) = x(n/8)+1
x(n) = x(n/8) + 1 + 2 
x(n/8) + 3

Step 3
x(n) = x(n/(2^k)) + k

Step 4
x(n/(2^k)) = 1
n/2^k = 1
n=2^k
k=lgn

Step 5 
x(n) = x(2^k/2^k) + lgn
= 1+ lgn

Mergesort 
x(n) = 2x(n/2) + n, x(1) = 1

Step 1 replace n with n/2
x(n/2) = 2x(n/4) + n/2
x(n) = 2x(n

--
Hanoi

def hanoi(num_disks, from_peg, to_peg:
if(nu